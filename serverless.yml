# prestonfrazier.net
#
# website-pf Serverless Deployment configuration

service: website-pf

plugins:
  - serverless-s3-deploy
  - serverless-s3-sync
  - serverless-plugin-scripts
  - serverless-wsgi
  - serverless-python-requirements

# Custom environment variables
custom:
    stages:
      - dev
      - prod
    accountId:
      dev: 890384337971
      prod: 890384337971
    acmCertificateArn:
      dev: "arn:aws:acm:us-east-1:890384337971:certificate/62ab5b7e-a3fa-4598-b6e3-d1eecadf4301"
      prod: "arn:aws:acm:us-east-1:890384337971:certificate/62ab5b7e-a3fa-4598-b6e3-d1eecadf4301"
    secretsArn:
      dev: ""
      prod: ""
    subnetId:
      dev: ""
      prod:
        - subnet-bf021290
    securityGroupId:
      dev: ""
      prod:
        - sg-072fbfb9b319fbfce

    # Python Flask Lmabda Config
    wsgi:
      app: lambda-backend/website-pf/src/app.app
      pythonBin: python3
      packRequirements: false
    pythonRequirements:
      dockerizePip: non-linux

    # Clear S3 Files with S3Deploy
    assets:
      targets:
        - bucket: website-pf-${self:provider.stage}
          empty: true
          prefix: site
          files:
            - source: s3-webapp/build/
              globs: "posts/**"
        - bucket: website-pf-${self:provider.stage}
          files:
            - source: s3-webapp/build/
              globs:
                 - "sitemap.xml"
                 - "robots.txt"
                 - "rss.xml"
    # Upload S3 Files with S3Sync
    s3Sync:
      - bucketName: website-pf-${self:provider.stage}
        bucketPrefix: site/${self:functions.website-pf.environment.VERSION}
        localDir: s3-webapp/build/
    # Additional cli scripts to run for deployments
    # Add Cache-Control metadata with S3Meta
    scripts:
      commands:
        fulldeploy: 'serverless deploy --nos3sync -s ${self:provider.stage}; sls s3deploy -s ${self:provider.stage}; sls s3sync -s ${self:provider.stage}; sls s3meta -s ${self:provider.stage}'
        functiondeploy: 'serverless deploy function -f website-pf -s ${self:provider.stage}'
        functionlayer: 'pip3 install -t lambda-backend/website-pf/lambda-layer/python/lib/python3.7/site-packages -r lambda-backend/website-pf/requirements.txt'
        s3meta: 'aws s3 cp s3://website-pf-${self:provider.stage}/ s3://website-pf-${self:provider.stage}/ --recursive --exclude "site/*" --exclude "posts/*" --cache-control max-age=86400,s-maxage=86400;
        aws s3 cp s3://website-pf-${self:provider.stage}/site/ s3://website-pf-${self:provider.stage}/site/ --recursive --cache-control max-age=31536000,s-maxage=2592000'

provider:
  name: aws
  accountId: ${self:custom.accountId.${self:provider.stage}}
  region: us-east-1
  versionFunctions: false
  endpointType: REGIONAL
  stage: ${opt:stage, 'prod'}
  apiKeys:
    - name: website-pf-${self:provider.stage}-client-key-111111
      description: Client key for website-pf api application.
  usagePlan:
    quota:
      limit: 40000
      offset: 0
      period: DAY
    throttle:
      burstLimit: 10
      rateLimit: 20

  # IAM Role for Lambda configuration
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::${self:functions.website-pf.environment.S3_WEBSITE_PF_BUCKET}"

# Application packaging information
package:
  individually: true

# Lambda Layers
layers:
  websitepf:
    path: lambda-backend/website-pf/lambda-layer
    name: website-pf-lambda-layer-${self:provider.stage}
    description: Lambda Layer for Website-PF application.
    compatibleRuntimes:
      - python3.7
      - python3.8

# Lambda backend configuration
functions:
  website-pf:
    runtime: python3.7
    handler: wsgi_handler.handler
    name: website-pf-${self:provider.stage}
    description: Website-PF backend for querying and retrieving transitions of care information.
    memorySize: 512
    timeout: 10
    provisionedConcurrency: 0

    layers:
      - Ref: WebsitepfLambdaLayer

    package:
      exclude:
      - documentation/**
      - rds-mysql-db/**
      - node_modules/**
      - s3-webapp/**
      - README.md
      - LICENSE
      - package-lock.json
      include:
        - lamba-backend/**

    events:
      # API Gateway configuration
      - http:
          path: /{proxy+}
          method: any
          private: true
          integration: lambda_proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
    vpc:
      securityGroupIds: ${self:custom.securityGroupId.${self:provider.stage}}
      subnetIds: ${self:custom.subnetId.${self:provider.stage}}

    environment:
      LOG_LEVEL: INFO
      ENVIRONMENT: ${self:provider.stage}
      S3_WEBSITE_PF_BUCKET: website-pf-${self:provider.stage}
      CLOUDFRONT_URL: { "Fn::GetAtt" : [ WebAppCloudFrontDistribution, DomainName ] }
      VERSION: 0.1.9


# CloudFormation resources
resources:
  Description: Website-PF CloudFormation Stack using serverless
  Resources:
    WebsitePFBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: website-pf-${self:provider.stage}
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    # S3 Bucket for webapp configuration
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsitePFBucket
        PolicyDocument:
          Statement:
            # Cloudfront & Lambda Bucket Allow
            - Sid: OAIReadGetObjects
              Effect: Allow
              Principal:
                AWS:
                - { "Fn::Join" : [" ", ["arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity", { Ref: WebAppCloudFrontOriginAccessIdentity } ] ] }
                - "arn:aws:iam::${self:custom.accountId.${self:provider.stage}}:role/website-pf-${self:provider.stage}-${self:provider.region}-lambdaRole"
              Action:
              - s3:GetObject
              Resource:
                - "arn:aws:s3:::website-pf-${self:provider.stage}/*"
            # Cloudfront Bucket Deny
            - Sid: OAIDenyObjects
              Effect: Deny
              Principal:
                AWS:
                - { "Fn::Join" : [" ", ["arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity", { Ref: WebAppCloudFrontOriginAccessIdentity } ] ] }
              Action:
              - s3:*
              Resource:
                - "arn:aws:s3:::website-pf-${self:provider.stage}/posts/*.html"
    # Cloudfront distribution configuration
    WebAppCloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: ${self:service}-${self:provider.stage}-access-identity
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: Website-PF serverless distribution for webapp in s3 bucket
          PriceClass: PriceClass_100
          Origins:
            - DomainName: website-pf-${self:provider.stage}.s3.amazonaws.com
              Id: s3-website-pf-${self:provider.stage}
              S3OriginConfig:
                OriginAccessIdentity: { "Fn::Join" : ["", ["origin-access-identity/cloudfront/", { Ref: WebAppCloudFrontOriginAccessIdentity } ] ]  }
          Enabled: 'true'
          DefaultRootObject: site/${self:functions.website-pf.environment.VERSION}/index.html
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /site/${self:functions.website-pf.environment.VERSION}/index.html
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /site/${self:functions.website-pf.environment.VERSION}/index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: s3-website-pf-${self:provider.stage}
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          Aliases:
            - "prestonfrazier.net"
            - "*.prestonfrazier.net"
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.acmCertificateArn.${self:provider.stage}}
            MinimumProtocolVersion: "TLSv1.2_2018"
            SslSupportMethod: "sni-only"
